{"version":3,"sources":["Components/Buttons/AddButton.js","Components/Buttons/SubtractButton.js","Components/Buttons/SubDisabledButton.js","Components/Buttons/ResetButton.js","Components/Buttons/ResetDisabledButton.js","App.js","reportWebVitals.js","index.js"],"names":["AddButton","props","Button","onClick","clicked","variant","color","SubtractButton","disabled","ResetButton","App","useState","state","setState","fontStyle","setFontStyle","darkMode","setDarkMode","fontColor","setFontColor","theme","createMuiTheme","palette","primary","main","deepPurple","secondary","purple","type","ThemeProvider","Paper","className","Grid","container","spacing","item","xs","style","height","SubDisabledButton","ResetDisabledButton","Switch","checked","onChange","FormControl","InputLabel","id","Select","labelId","value","event","target","console","log","MenuItem","hex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3fae753.chunk.js","sourcesContent":["import React from 'react'\nimport {Button} from '@material-ui/core'\nconst AddButton = (props) => {\n    return (\n        <Button onClick={props.clicked} variant='contained' color='primary'>\n            Add\n        </Button>\n    )\n}\n\nexport default AddButton\n","import React from 'react'\nimport {Button} from '@material-ui/core'\n\nconst SubtractButton = (props) => {\n    return (\n        <Button onClick={props.clicked} variant='contained' color='secondary'>\n            Subtract\n        </Button>\n    )\n}\n\nexport default SubtractButton\n","import React from 'react'\nimport {Button} from '@material-ui/core'\n\nconst SubtractButton = (props) => {\n    return (\n        <Button onClick={props.clicked} variant='contained' color='secondary' disabled>\n            Subtract\n        </Button>\n    )\n}\n\nexport default SubtractButton","import React from 'react'\nimport {Button} from '@material-ui/core'\n\nconst ResetButton = (props) => {\n    return (\n        <Button onClick={props.clicked}  variant='contained' color='default'> \n            Reset\n        </Button>\n    )\n}\n\nexport default ResetButton\n","import React from 'react'\nimport {Button} from '@material-ui/core'\n\nconst ResetButton = (props) => {\n    return (\n        <Button onClick={props.clicked}  variant='contained' color='default' disabled> \n            Reset\n        </Button>\n    )\n}\n\nexport default ResetButton","import React, { useState } from 'react'\n\nimport { createMuiTheme, Grid, MenuItem, FormControl, InputLabel, Paper, Select, Switch, ThemeProvider } from '@material-ui/core'\nimport { deepPurple, purple } from '@material-ui/core/colors'\nimport './App.css';\n\nimport AddButton from './Components/Buttons/AddButton'\nimport SubtractButton from './Components/Buttons/SubtractButton'\nimport SubDisabledButton from './Components/Buttons/SubDisabledButton'\nimport ResetButton from './Components/Buttons/ResetButton'\nimport ResetDisabledButton from './Components/Buttons/ResetDisabledButton'\nimport { TwitterPicker } from 'react-color'\n\nfunction App() {\n  const [state, setState] = useState(0)\n  const [fontStyle, setFontStyle] = useState('DimitriSwank')\n  const [darkMode, setDarkMode] = useState(false)\n  const [fontColor, setFontColor] = useState({color: ''})\n  \n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: deepPurple[500],\n      },\n      secondary: {\n        main: purple[500],\n      },\n      type: darkMode ? 'dark' : 'light',\n    },\n  });\n\n  const addHandler = () => {\n    setState(state + 1)\n  }\n\n  const subHandler = () => {\n    setState(state - 1)\n  }\n\n  const resetHandler = () => {\n    setState(0)\n  }\n\n  const darkModeToggle = () => {\n    setDarkMode(!darkMode)\n    setFontColor({color: ''})\n  }\n\n  const changeFontHandler = (event) => {\n    setFontStyle(event.target.value)\n    console.log(event.target.value)\n  }\n\n  const setColorHandler = (color) => {\n    setFontColor({color: color.hex})\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Paper className=\"App\" >\n      <Grid container spacing={4} className='mainGrid'>\n        <Grid item xs={12} className={fontStyle} style={{height: '200px'}}>\n          <span style={fontColor}>\n            {state}\n          </span>\n          \n        </Grid>\n        <Grid container item spacing={3} className=\"ButtonBar\">\n          <Grid item>\n            <AddButton clicked={addHandler} />\n          </Grid>\n          <Grid item >\n            {state > 0 ? \n              <SubtractButton clicked={subHandler} />  : \n              <SubDisabledButton />\n              }     \n          </Grid>\n          <Grid item>\n            { state > 0 ?\n            <ResetButton clicked={resetHandler}/> :\n            <ResetDisabledButton />\n            }\n            </Grid>\n        </Grid>\n        <Grid container item spacing={3} className=\"StyleBar\">\n            <Grid item>\n              <Switch checked={darkMode} onChange={darkModeToggle}/>\n              <br />\n                  {darkMode ? 'Dark Mode' : 'Light Mode'}\n            </Grid>\n            <Grid item xs={4}>\n                <FormControl variant='filled'>\n                  <InputLabel id='changeFont'>\n                      Change Font\n                  </InputLabel>\n                  <Select\n                      labelId='changeFont'\n                      id='font'\n                      value={fontStyle}\n                      onChange={changeFontHandler}\n                      >\n                      <MenuItem value={'DimitriSwank'}>Dimitri Swank</MenuItem>\n                      <MenuItem value={'Roboto'}>Roboto</MenuItem>\n                      <MenuItem value={'ZenDots'}>Zen Dots</MenuItem>\n                      </Select>\n                </FormControl>\n            </Grid>\n            <Grid item>\n              <TwitterPicker color={fontColor} onChange={setColorHandler}/>\n            </Grid>\n        </Grid>\n      </Grid>\n      </Paper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}